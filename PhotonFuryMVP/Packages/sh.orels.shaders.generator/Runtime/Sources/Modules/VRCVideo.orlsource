// The aspect ratio and baking code taken from
// https://github.com/MerlinVR/USharpVideo
// Original license below
//
// MIT License
//
// Copyright (c) 2020 Merlin
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

%Properties()
{
    UI_Video_ScreenHeader("# Video Screen", Int) = 1
    UI_VideoDocs("[This module has documentation](https://shaders.orels.sh/docs/orl-standard/video-screen)", Int) = 0
    _MetaPassEmissiveBoost("Meta Pass Emissive Boost", Float) = 1.0
    _TargetAspectRatio("Target Aspect Ratio", Float) = 1.7777777
    [ToggleUI]_IsAVProInput("Is AV Pro Input", Int) = 0
}

%Variables()
{
    half _MetaPassEmissiveBoost;
    float _TargetAspectRatio;
    int _IsAVProInput;
    half4 _EmissionMap_TexelSize;
}

%Fragment("VRCVideoFragment")
{
    half3 VideoEmission(float2 uv)
    {
    #ifndef _EMISSION
        return 0;
    #else
    float2 emissionRes = _EmissionMap_TexelSize.zw;

    float currentAspectRatio = emissionRes.x / emissionRes.y;

    float visibility = 1.0;

    // If the aspect ratio does not match the target ratio, then we fit the UVs to maintain the aspect ratio while fitting the range 0-1
    if (abs(currentAspectRatio - _TargetAspectRatio) > 0.001)
    {
        float2 normalizedVideoRes = float2(emissionRes.x / _TargetAspectRatio, emissionRes.y);
        float2 correctiveScale;
        
        // Find which axis is greater, we will clamp to that
        if (normalizedVideoRes.x > normalizedVideoRes.y)
            correctiveScale = float2(1, normalizedVideoRes.y / normalizedVideoRes.x);
        else
            correctiveScale = float2(normalizedVideoRes.x / normalizedVideoRes.y, 1);

        uv = ((uv - 0.5) / correctiveScale) + 0.5;

        // Antialiasing on UV clipping
        float2 uvPadding = (1 / emissionRes) * 0.1;
        float2 uvfwidth = fwidth(uv.xy);
        float2 maxFactor = smoothstep(uvfwidth + uvPadding + 1, uvPadding + 1, uv.xy);
        float2 minFactor = smoothstep(-uvfwidth - uvPadding, -uvPadding, uv.xy);

        visibility = maxFactor.x * maxFactor.y * minFactor.x * minFactor.y;

        //if (any(uv <= 0) || any(uv >= 1))
        //    return float3(0, 0, 0);
    }

    #if UNITY_UV_STARTS_AT_TOP
    if (_IsAVProInput)
    {
        uv = float2(uv.x, 1 - uv.y);
    }
    #endif
    
    float3 texColor = SAMPLE_TEXTURE2D(_EmissionMap, sampler_EmissionMap, uv).rgb;

    if (_IsAVProInput)
    {
        texColor = pow(texColor, 2.2f);
    }

    return texColor * _EmissionColor.rgb * visibility;
    #endif
    }

    void VRCVideoFragment(MeshData d, inout SurfaceData o) {
        o.Emission = VideoEmission(d.uv0.xy);
    }
}

%PostPasses()
{
    Pass
    {
        Name "META"
        Tags { "LightMode" = "Meta" }

        Cull Off

        CGPROGRAM
        #pragma vertex vert_meta
        #pragma fragment frag_meta

        #pragma shader_feature_local _EMISSION
        #pragma shader_feature _METALLICGLOSSMAP
        #pragma shader_feature _ _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
        #pragma shader_feature ___ _DETAIL_MULX2
        #pragma shader_feature EDITOR_VISUALIZATION

        #include "UnityStandardMeta.cginc"
        ENDCG
    }
}