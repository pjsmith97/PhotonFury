%ShaderTags()
{
    "LTCGI" = "Always"
}

%Properties()
{
    [ToggleUI]UI_LTCGIHeader ("# LTCGI", Int) = 1
    UI_LTCGIDocs("[This module has documentation](https://shaders.orels.sh/docs/orl-standard/ltcgi)", Int) = 0
    [Toggle(INTEGRATE_LTCGI)]_IntegrateLTCGI("Integrate LTCGI", Int) = 0
    UI_LTCGIDownload("[Make sure to download LTCGI before enabling this option](https://github.com/PiMaker/ltcgi/releases)", Int) = 0
}

%ShaderFeatures()
{
    #pragma shader_feature_local INTEGRATE_LTCGI
}

%ShaderDefines()
{
    #if defined(INTEGRATE_LTCGI) && !defined(PLAT_QUEST)
        #define _INTEGRATE_CUSTOMGI
        #include "Packages/at.pimaker.ltcgi/Shaders/LTCGI.cginc"
    #endif
}

%Fragment("LTCGIFragment") {
    // this function MUST be named IntegrateCustomGI as its called from the Lighting code
    void IntegrateCustomGI(MeshData d, SurfaceData o, inout half3 indirectSpecular, inout half3 indirectDiffuse)
    {
        #if defined(INTEGRATE_LTCGI) && !defined(PLAT_QUEST)
            LTCGI_Contribution(
            d.worldSpacePosition.xyz,
            o.Normal.xyz,
            d.worldSpaceViewDir,
            1 - o.Smoothness,
            d.uv1.xy,
            indirectDiffuse,
            indirectSpecular
            );
        #endif
    }

    void LTCGIFragment() {
    }
}